<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="\\" #>
<#
CustomT4Host host       = (CustomT4Host) Host;
OdcmModel model         = host.CurrentModel;
CodeWriterJava writer   = (CodeWriterJava) host.CodeWriter;
OdcmClass entity = host.CurrentType.AsOdcmClass();
TemplateWriterSettings settings = ConfigurationService.Settings;

#>
<#=writer.WriteHeader()#>
package <#=model.NamespaceName().ToLower()#>;

<# if (entity.Base == null) {#>
import com.microsoft.services.orc.core.ODataBaseEntity;
<#}#>

<# if (entity.StreamProperties().Any()) {#>
import com.microsoft.services.orc.core.ODataStream;
<#}#>


<#
    string extends = entity.Base == null ? " extends ODataBaseEntity" : " extends " + entity.Base.Name.Substring(entity.Base.Name.LastIndexOf(".") +1);
#>

/**
 * The type <#=entity.Name.ToUpperFirstChar().SplitCamelCase()#>.
*/
public class <#=entity.Name.ToUpperFirstChar()#><#=extends#> {

    public <#=entity.Name.ToUpperFirstChar()#>(){
        setODataType("#<#=model.GetNamespace()#>.<#=entity.Name#>");
    }
<# 
    foreach(var property in entity.Properties){
    var propertyType = property.IsCollection ? string.Format("java.util.List<{0}>", property.GetTypeString()) : property.GetTypeString();
    var newType = property.IsCollection ? string.Format("new java.util.ArrayList<{0}>();", property.GetTypeString()) : "null;" ;
#>
    <# 
    if (property.IsCollection) {
    #>

    <# if (settings.InitializeCollections) { #>

    private <#=propertyType#> <#=property.SanitizePropertyName()#> = <#=newType#>
    
    <# } else { #>
    
    private <#=propertyType#> <#=property.SanitizePropertyName()#> = null;
    
    <#}#>

    <#}else{#>
        
    private <#=propertyType#> <#=property.SanitizePropertyName()#>;
    <#}#> 
    /**
    * Gets the <#=property.Name.SplitCamelCase()#>.
    *
    * @return the <#=propertyType#>
    */
    public <#=propertyType#> get<#=property.Name.ToUpperFirstChar()#>() {
        return this.<#=property.SanitizePropertyName()#>; 
    }

    /**
    * Sets the <#=property.Name.SplitCamelCase()#>.
    *
    * @param value the <#=propertyType#>
    */
    public void set<#=property.Name.ToUpperFirstChar()#>(<#=propertyType#> value) { 
        this.<#=property.SanitizePropertyName()#> = value; 
        valueChanged("<#=property.Name#>", value);

    }
<#
    }
#>
}

