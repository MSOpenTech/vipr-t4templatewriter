<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="\\" #>
<#
CustomT4Host host       = (CustomT4Host) Host;
OdcmModel model         = host.CurrentModel;
CodeWriterJava writer   = (CodeWriterJava) host.CodeWriter;

OdcmClass entity = host.CurrentType.AsOdcmClass();
TemplateWriterSettings settings = ConfigurationService.Settings;

var baseOperation = entity.Base == null ? "extends OrcOperations" : "extends " + entity.Base.Name.Substring(entity.Base.Name.LastIndexOf(".") +1) + "Operations";
#>
<#=writer.WriteHeader()#>
package <#=model.ODataPackageNamespace()#>;

import <#=model.NamespaceName()#>.*;
import com.google.common.util.concurrent.*;
import com.microsoft.services.orc.core.*;
import com.microsoft.services.orc.http.*;
import static com.microsoft.services.orc.core.Helpers.*;
import com.microsoft.services.orc.serialization.JsonSerializer;

/**
 * The type <#=entity.Name.ToUpperFirstChar()#>Operations.
 */
public class <#=entity.Name.ToUpperFirstChar()#>Operations <#=baseOperation#> {

     /**
      * Instantiates a new <#=entity.Name.ToUpperFirstChar()#>Operations.
      *
      * @param urlComponent the url component
      * @param parent the parent
      */
    public <#=entity.Name.ToUpperFirstChar()#>Operations(String urlComponent, OrcExecutable parent) {
            super(urlComponent, parent);
    }

    /**
     * Add parameter.
     *
     * @param name the name
     * @param value the value
     * @return the operations
     */
    public <#=entity.Name.ToUpperFirstChar()#>Operations addParameter(String name, Object value) {
        addCustomParameter(name, value);
        return this;
    }

     /**
     * Add header.
     *
     * @param name the name
     * @param value the value
     * @return the operations
     */
    public <#=entity.Name.ToUpperFirstChar()#>Operations addHeader(String name, String value) {
        addCustomHeader(name, value);
        return this;
    }

<#
        if(entity.HasActions()){
            foreach(var someAction in entity.Actions()){

                    if(!someAction.IsBoundToCollection){

                        string inputParam = string.Empty;
                        string actionParams = string.Empty;
                        string paramNames = string.Empty;

                        System.Text.StringBuilder sb = new System.Text.StringBuilder();
                        System.Text.StringBuilder sbParams = new System.Text.StringBuilder();
                        System.Text.StringBuilder serializations = new System.Text.StringBuilder();

                        if (someAction.Parameters.Any())
                        {
                            paramNames = someAction.Parameters.Select(x => "serialized" + x.Name).Aggregate((current, next) => current + ", " + next);
                        }

                        foreach(var parameter in someAction.Parameters){
                            var paramType = parameter.IsCollection ? string.Format("java.util.List<{0}>",parameter.GetTypeString()) : parameter.GetTypeString();
                
                            inputParam += string.Format("{1} {0}, ",parameter.Name.ToLowerFirstChar(),paramType);
                            actionParams += string.Format("{1} {0}, ",parameter.Name.ToLowerFirstChar(), "String");

                            sbParams.AppendFormat("@param {0} the {0} ", parameter.Name.ToLowerFirstChar());

                            sb.AppendFormat("map.put(\"{0}\", {1});", 
                                            parameter.Name, parameter.Name.ToLowerFirstChar());
                            sb.Append(Environment.NewLine);
                            sb.Append("\t\t");

                            serializations.AppendFormat("String serialized{0} = serializer.serialize({1});", parameter.Name, parameter.Name.ToLowerFirstChar());
                            serializations.Append(Environment.NewLine);
                            serializations.Append("\t\t");

                        }
            #>
    
    <# if (someAction.IsFunction()) { #>

     /**
     * <#= someAction.Name#> listenable future.
     * <#= sbParams.ToString()#>
     * @return the listenable future
     */         
    public ListenableFuture<<#=someAction.ReturnType.GetTypeString()#>> <#= someAction.Name.ToLowerFirstChar() #>(<#=inputParam.Length > 0 ? inputParam.Substring(0, inputParam.Length -2) : string.Empty#>) { 
		
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
        <#= sb.ToString() #>

		Request request = getResolver().createRequest();
		request.setVerb(HttpVerb.GET);
		String parameters = getFunctionParameters(map);
        
		<# if (settings.AllowShortActions) { #>
        
		request.getUrl().appendPathComponent("<#= someAction.Name #>(" + parameters + ")");   
        
		<# } else { #>
        
		request.getUrl().appendPathComponent("<#= someAction.FullName #>(" + parameters + ")");   
        
		<#}#>

		ListenableFuture<OrcResponse> future = oDataExecute(request);
		   
        <# if (someAction.ReturnType.GetTypeString() == "byte[]")
        {#>

		return transformToByteArrayListenableFuture(future);

        <#}else{#>

		return transformToEntityListenableFuture(transformToStringListenableFuture(future), <#= someAction.ReturnType.GetTypeString()#>.class, getResolver());
        
        <#}#>

   }
    <# }else{ #>

    /**
     * <#= someAction.Name#> listenable future.
     * <#= sbParams.ToString()#>
     * @return the listenable future
     */         
    public ListenableFuture<<#= someAction.ReturnType == null ? "Integer" : someAction.ReturnType.GetTypeString()#>> <#= someAction.Name.ToLowerFirstChar() #>(<#=inputParam.Length > 0 ? inputParam.Substring(0, inputParam.Length -2) : string.Empty#>) { 
        <# if (someAction.Parameters.Any()) {#>

		JsonSerializer serializer = getResolver().getJsonSerializer();<#}#>      
        
		<#= serializations.ToString() #>  
        
		<# if (someAction.ReturnType != null && someAction.ReturnType.GetTypeString() == "byte[]")
        {#>

		addByteArrayResultCallback(result, future, <#= someAction.ReturnType == null ? "Integer" : someAction.ReturnType.GetTypeString()#>.class);
        
		<#}else{#>

		ListenableFuture<String> future = <#= someAction.Name.ToLowerFirstChar() #>Raw(<#= paramNames.ToString() #>);
		return transformToEntityListenableFuture(future, <#= someAction.ReturnType == null ? "Integer" : someAction.ReturnType.GetTypeString()#>.class, getResolver());
        <#}#>

    }

     /**
     * <#= someAction.Name#>Raw listenable future.
     * <#= sbParams.ToString()#>
     * @return the listenable future
     */ 
    public ListenableFuture<String> <#= someAction.Name.ToLowerFirstChar() #>Raw(<#=actionParams.Length > 0 ? actionParams.Substring(0, actionParams.Length -2) : string.Empty #>){
        <#if (someAction.Parameters.Any()) { #>

        java.util.Map<String, String> map = new java.util.HashMap<String, String>();
        <#}#>

        <#= sb.ToString() #>
        Request request = getResolver().createRequest();
        request.setVerb(HttpVerb.POST);
        <#if (someAction.Parameters.Any()) { #>

        request.setContent(getResolver().getJsonSerializer()
               .jsonObjectFromJsonMap(map).getBytes(Constants.UTF8));
        <#}#>
        <# if (settings.AllowShortActions) { #>
        
        request.getUrl().appendPathComponent("<#= someAction.Name#>");
        
        <# } else { #>
        
        request.getUrl().appendPathComponent("<#= someAction.FullName#>");
        <#}#>

        ListenableFuture<OrcResponse> future = oDataExecute(request);
        return transformToStringListenableFuture(future);
    }

<#} #>

<#              }
            }
}
#>
}
