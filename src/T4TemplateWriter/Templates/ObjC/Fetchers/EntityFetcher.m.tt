<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="Shared.template.tt"#>

<#
var entity = host.CurrentType.AsOdcmClass();
var entityName = prefix + entity.Name;
#>
#import "<#=prefix#>Fetchers.h"

@implementation <#=entityName#>Fetcher

@synthesize operations = _operations;

- (instancetype)initWithUrl:(NSString *)urlComponent parent:(id<MSOrcExecutable>)parent {

    if (self = [super initWithUrl:urlComponent parent:parent asClass:[<#=entityName#> class]]) {

		_operations = [[<#=entityName#>Operations alloc] initOperationWithUrl:urlComponent parent:parent];
    }

    return self;
}

- (void)update:(id)entity callback:(void (^)(<#=prefix + entity.Name#> *<#=entity.Name.ToLowerFirstChar()#>, MSOrcError *e))callback {

	return [super update:entity callback:callback];
}

- (void)delete:(void (^)(int status, MSOrcError *e))callback {

	return [super deleteWithCallback:callback];
}

- (<#=entityName#>Fetcher *)addCustomParametersWithName:(NSString *)name value:(id)value {
    [super addCustomParametersWithName:name value:value];
    
    return self;
}

- (<#=entityName#>Fetcher *)addCustomHeaderWithName:(NSString *)name value:(NSString *)value {
    [super addCustomHeaderWithName:name value:value];
    
    return self;
}

- (<#=entityName#>Fetcher *)select:(NSString *)params {
    [super select:params];
    
    return self;
}

- (<#=entityName#>Fetcher *)expand:(NSString *)value {
    [super select:value];
    
    return self;
}

- (void) readWithCallback:(void (^)(<#=prefix + entity.Name#> *<#=entity.Name.ToLowerFirstChar()#>, MSOrcError *error))callback {
    [super readWithCallback:^(id response, MSOrcError *error) {
        callback(response, error);
    }];
}
<#

foreach(var prop in entity.NavigationProperties())
{
	if(prop.IsCollection())
	{
#>

- (<#=prefix + prop.Type.Name#>CollectionFetcher *)<#=prop.Name.ToLowerFirstChar()#> {

    return [[<#=prefix + prop.Type.Name#>CollectionFetcher alloc] initWithUrl:@"<#=prop.Name#>" parent:self asClass:[<#=prefix + prop.Type.Name#> class]];
}

- (<#=prefix + prop.Type.Name#>Fetcher *)get<#=prop.Name.ToUpperFirstChar()#>ById:(NSString *)id {

    return [[[<#=prefix + prop.Type.Name#>CollectionFetcher alloc] initWithUrl:@"<#=prop.Name#>" parent:self asClass:[<#=prefix + prop.Type.Name#> class]] getById:id];
}
<#
	}
	else
	{
#>

- (<#=prefix + prop.Type.Name#>Fetcher *)<#=prop.Name.ToLowerFirstChar()#> {

	 return [[<#=prefix + prop.Type.Name#>Fetcher alloc] initWithUrl:@"<#=prop.Name#>" parent:self asClass:[<#=prefix + prop.Type.Name#> class]];
}
<#		
			
	}
}
foreach(var child in entity.Derived)
{
#>

- (<#=prefix + child.Name#>Fetcher *)as<#=child.Name.ToUpperFirstChar()#> {

	return [[<#=prefix +child.Name#>Fetcher alloc] initWithUrl:@"" parent:self asClass:[<#=prefix + child.Name#> class]];
}
<#

}
#>

@end