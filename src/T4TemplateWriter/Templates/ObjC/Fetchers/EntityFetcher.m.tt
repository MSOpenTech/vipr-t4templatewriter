<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="Shared.template.tt"#>

<#
string entityName = entity.ToObjCInterface();
string fetcherName = entityName + "Fetcher";
#>
#import "<#=prefix#>Fetchers.h"

@implementation <#=fetcherName#>

@synthesize operations = _operations;

- (instancetype)initWithUrl:(NSString *)urlComponent parent:(id<MSOrcExecutable>)parent {

    if (self = [super initWithUrl:urlComponent parent:parent asClass:[<#=entityName#> class]]) {

		_operations = [[<#=entityName#>Operations alloc] initOperationWithUrl:urlComponent parent:parent];
    }

    return self;
}

- (void)update:(id)entity callback:(void (^)(<#=entityName#> *<#=entity.Name.ToObjCIdentifier()#>, MSOrcError *e))callback {

	return [super update:entity callback:callback];
}

- (void)delete:(void (^)(int status, MSOrcError *e))callback {

	return [super deleteWithCallback:callback];
}

- (<#=entityName#>Fetcher *)addCustomParametersWithName:(NSString *)name value:(id)value {
    [super addCustomParametersWithName:name value:value];
    
    return self;
}

- (<#=entityName#>Fetcher *)addCustomHeaderWithName:(NSString *)name value:(NSString *)value {
    [super addCustomHeaderWithName:name value:value];
    
    return self;
}

- (<#=entityName#>Fetcher *)select:(NSString *)params {
    [super select:params];
    
    return self;
}

- (<#=entityName#>Fetcher *)expand:(NSString *)value {
    [super select:value];
    
    return self;
}

- (void) readWithCallback:(void (^)(<#=entityName#> *<#=entity.Name.ToObjCIdentifier()#>, MSOrcError *error))callback {
    [super readWithCallback:^(id response, MSOrcError *error) {
        callback(response, error);
    }];
}
<#

foreach(var prop in entity.NavigationProperties())
{
	if(prop.IsCollection())
	{
#>

- (<#=prop.GetTypeString(true)#>CollectionFetcher *)<#=prop.GetGetterString()#> {

    return [[<#=prop.GetTypeString(true)#>CollectionFetcher alloc] initWithUrl:@"<#=prop.Name#>" parent:self asClass:[<#=prop.GetTypeString(true)#> class]];
}

- (<#=prop.GetTypeString(true)#>Fetcher *)<#=prop.GetGetterString()#>ById:(NSString *)identifier {

    return [[[<#=prop.GetTypeString(true)#>CollectionFetcher alloc] initWithUrl:@"<#=prop.Name#>" parent:self asClass:[<#=prop.GetTypeString(true)#> class]] getById:identifier];
}
<#
	}
	else
	{
#>

- (<#=prop.GetTypeString(true)#>Fetcher *)<#=prop.GetGetterString()#> {

	 return [[<#=prop.GetTypeString(true)#>Fetcher alloc] initWithUrl:@"<#=prop.Name#>" parent:self asClass:[<#=prop.GetTypeString(true)#> class]];
}
<#		
			
	}
}
foreach(var child in entity.Derived)
{
#>

- (<#=child.ToObjCInterface()#>Fetcher *)<#=child.Name.ToObjCIdentifierPrefix("as")#> {

	return [[<#=child.ToObjCInterface()#>Fetcher alloc] initWithUrl:@"" parent:self asClass:[<#=child.ToObjCInterface()#> class]];
}
<#

}
#>

@end
