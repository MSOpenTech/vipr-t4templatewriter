<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="Shared.template.tt"#>

<#
var entity = host.CurrentType.AsOdcmClass();	
var entityName = prefix + entity.Name + "Operations";
TemplateWriterSettings settings = ConfigurationService.Settings;
#>
#import "<#=prefix#>Fetchers.h"

<#=writer.GetImplementationDoc(entityName)#>
@implementation <#=entityName#>

- (instancetype)initWithUrl:(NSString *)urlComponent parent:(id<MSOrcExecutable>)parent {
 
    return [super initOperationWithUrl:urlComponent parent:parent];
}

<#
if(entity.HasActions())
{
	foreach(var action in entity.Actions())
	{
		if(!action.IsBoundToCollection)
		{
			var clazz = action.ReturnType.IsComplex() ? "[" + action.ReturnType.GetTypeString() + " class]" : "nil";

			if (action.IsFunction())
			{
#>
<#=writer.GetMethodHeader(action)#> {

	id<MSOrcRequest> request = [self.resolver createOrcRequest];
	<#=writer.GetFunctionParameters(action.Parameters)#>
	
	NSString *parameters = [MSOrcBaseContainer getFunctionParameters:params];

	[request.url appendPathComponent:[[NSString alloc] initWithFormat:@"<#= action.Name#>(%@)",parameters]];
	[request setVerb:HTTP_VERB_POST];

	return [super orcExecuteRequest:request callback:^(id<MSOrcResponse> response, MSOrcError *e) {
       
	   if (e == nil) {

			<#=writer.GetTypeForAction(action)#> result = (<#=writer.GetTypeForAction(action)#>)[super.resolver.jsonSerializer deserialize:response.data asClass:<#=clazz#>];
            callback(result, e);
        }
        else {

            callback(<#=action.ReturnType.IsComplex() ? "nil" : " response.status"#>, e);
        }
    }];
}
<#			
    		}
    		else if(action != null)
    		{
#>
<#=writer.GetMethodHeader(action)#> {
	<#=writer.GetParametersToJson(action.Parameters)#>
	return [self <#= action.Name.ToLowerFirstChar() #>Raw<#=writer.GetParametersForRawCall(action.Parameters.Select(p => p.Name))#>:^(NSString *returnValue, MSOrcError *e) {
       
	   if (e == nil) {

			<#=writer.GetTypeForAction(action)#> result = (<#=writer.GetTypeForAction(action)#>)[super.resolver.jsonSerializer deserialize:[returnValue dataUsingEncoding:NSUTF8StringEncoding] asClass:<#=clazz#>];
            callback(result, e);
        } 
		else {

            callback(<#=action.ReturnType.IsComplex() ? "nil" : "(int)[returnValue integerValue]"#>, e);
        }
    }];
}

<#=writer.GetMethodHeaderRaw(action)#> {

	id<MSOrcRequest> request = [super.resolver createOrcRequest];
	<#=writer.GetParametersToJsonRaw(action.Parameters.Select(p => p.Name))#>
	
	[request setVerb:HTTP_VERB_POST];
	 <# if (settings.AllowShortActions) { #>    
	[request.url appendPathComponent:@"<#= action.Name#>"];
        <# } else { #>
	[request.url appendPathComponent:@"<#= action.FullName#>"];
     <#}#>

	return [super orcExecuteRequest:request callback:^(id<MSOrcResponse> response, MSOrcError *e) {
        
		if (e == nil) {
            
			callback([[NSString alloc] initWithData:response.data encoding:NSUTF8StringEncoding], e);
        }
        else {

            callback([[NSString alloc] initWithFormat:@"%d", response.status], e);
        }
    }];
}
    				
<#			}
		}
	}
}
#>
@end