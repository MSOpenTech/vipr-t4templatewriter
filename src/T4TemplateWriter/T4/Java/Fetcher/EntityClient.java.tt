<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="BaseTemplateCustomHost.java.tt"#>
<#@ output extension="\\" #>
<#
CustomHost host = (CustomHost)Host;
OdcmModel model = host.Model;
#>
<#=GetCommentHeader()#>
package <#=model.ODataPackageNamespace()#>;

import <#=model.NamespaceName()#>.*;
import com.microsoft.services.orc.*;
import com.microsoft.services.orc.interfaces.DependencyResolver;

/**
 * The type <#=model.GetEntityContainer()#>Client.
 */
public class <#=model.GetEntityContainer().ToCheckedCase()#>Client extends BaseOrcContainer {

     /**
     * Instantiates a new <#=model.GetEntityContainer().ToCheckedCase()#>Client.
     *
     * @param url the url
     * @param resolver the resolver
     */
    public <#=model.GetEntityContainer().ToCheckedCase()#>Client(String url, DependencyResolver resolver) {
        super(url, resolver);
    }

    /**
     * Add parameter.
     *
     * @param name the name
     * @param value the value
     * @return the client
     */
    public <#=model.GetEntityContainer().ToCheckedCase()#>Client addParameter(String name, Object value) {
        addCustomParameter(name, value);
        return this;
    }

     /**
     * Add header.
     *
     * @param name the name
     * @param value the value
     * @return the client
     */
    public <#=model.GetEntityContainer().ToCheckedCase()#>Client addHeader(String name, String value) {
        addCustomHeader(name, value);
        return this;
    }

<#

foreach(var prop in model.EntityContainer.Properties){

    if(prop.IsCollection()){
#>
     /**
     * Gets <#=prop.Type.GetTypeString()#>.
     *
     * @return the <#=prop.Type.GetTypeString()#>
     */
    public OrcCollectionFetcher<<#=prop.Type.GetTypeString()#>, <#=prop.Type.GetTypeString()#>Fetcher, <#=prop.Type.GetTypeString()#>CollectionOperations> get<#=prop.Name.ToCheckedCase()#>() {
        return new OrcCollectionFetcher<<#=prop.Type.GetTypeString()#>, <#=prop.Type.GetTypeString()#>Fetcher, <#=prop.Type.GetTypeString()#>CollectionOperations>("<#=prop.Name#>", this, <#=prop.Type.GetTypeString()#>.class,<#=prop.Type.GetTypeString()#>CollectionOperations.class);
    }
<#
    }else{
#>
     /**
     * Gets <#=prop.Name#>.
     *
     * @return the <#=prop.Name#>
     */
    public <#=prop.Type.GetTypeString()#>Fetcher get<#=prop.Name.ToCheckedCase()#>() {
        return new <#=prop.Type.GetTypeString()#>Fetcher("<#=prop.Name#>", this);
    }
<#  
    
    }
}
#>
}